{"version":3,"sources":["components/GridItem.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["GridItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","displayColorPicker","state","handleClose","onColorChange","_ref","hex","color","onColorPickerClose","_this$props","rowIndex","columnIndex","io","emit","react_default","a","createElement","className","onClick","style","backgroundColor","lib","onChange","onChangeComplete","React","Component","Grid","drawing","socketIo","on","data","updatedDrawing","assign","gridItems","length","push","src_components_GridItem","map","rowItem","App","Grid_Grid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c64b78aa.chunk.js","sourcesContent":["import React from \"react\";\nimport { CompactPicker } from \"react-color\";\nimport { STORAGE_URL } from \"../Constants\";\nimport \"./GridItem.css\";\n\nclass GridItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: props.color,\n      displayColorPicker: false,\n    };\n  }\n\n  handleClick = () => {\n    this.setState({ displayColorPicker: !this.state.displayColorPicker });\n  };\n\n  handleClose = () => {\n    this.setState({ displayColorPicker: false });\n  };\n\n  onColorChange = ({ hex }) => {\n    this.setState({ color: hex });\n  };\n\n  onColorPickerClose = () => {\n    const { rowIndex, columnIndex } = this.props;\n    const color = this.state.color;\n\n    this.props.io.emit('user changed color', {\n      rowIndex, columnIndex, color,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"GridItem\" onClick={this.handleClick} style={{ backgroundColor: this.state.color }}>\n        {this.state.displayColorPicker ? (\n          <div className=\"GridItemPopover\">\n            <div className=\"GridItemCover\" onClick={this.handleClose} />\n            <CompactPicker\n              color={this.state.color}\n              onChange={this.onColorChange}\n              onChangeComplete={this.onColorPickerClose}\n            />\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default GridItem;\n","import React, { Component } from \"react\";\nimport GridItem from \"./GridItem\";\nimport { STORAGE_URL } from \"../Constants\";\nimport io from 'socket.io-client';\nimport \"./Grid.css\";\n\nexport default class Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drawing: null,\n    };\n    this.socketIo = io();\n    this.socketIo.on('initialize', (data) => {\n      this.setState({ drawing: data });\n    });\n    this.socketIo.on('new color', (data) => {\n      if (this.state.drawing) {\n        const updatedDrawing = Object.assign({}, this.state.drawing);\n        updatedDrawing[data.rowIndex][data.columnIndex] = data.color;\n        this.setState({ drawing: updatedDrawing });\n      }\n    });\n  }\n\n  render() {\n    if (!this.state.drawing) {\n      return <div>\"Loading...\"</div>;\n    }\n    // Given a 2d array, render it\n    const gridItems = [];\n    for (let rowIndex = 0; rowIndex < this.state.drawing.length; rowIndex++) {\n      gridItems[rowIndex] = [];\n      for (let columnIndex = 0; columnIndex < this.state.drawing[rowIndex].length; columnIndex++) {\n        gridItems[rowIndex].push(\n          <GridItem io={this.socketIo} color={this.state.drawing[rowIndex][columnIndex]} rowIndex={rowIndex} columnIndex={columnIndex} />,\n        );\n      }\n    }\n\n    return (\n      <div>\n        {gridItems.map(rowItem => {\n          return <div className=\"GridRow\">{rowItem}</div>;\n        })}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./components/Grid\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div>Reddit Place Clone</div>\n        <div className=\"Subtext\">Click on a tile to change its color</div>\n        <Grid />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}