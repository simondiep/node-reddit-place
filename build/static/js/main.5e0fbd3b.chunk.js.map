{"version":3,"sources":["components/FooterColorPalette.js","components/GridItem.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["colors","ColorOption","props","classNames","isSelected","react_default","a","createElement","className","style","backgroundColor","color","onClick","onColorSelected","FooterColorPalette","id","map","FooterColorPalette_ColorOption","selectedColor","GridItem","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","_this$props","rowIndex","columnIndex","io","emit","setState","state","prevProps","React","Component","Grid","drawing","socketIo","connect","on","data","currentDrawing","gridItems","length","push","src_components_GridItem","rowItem","App","bind","assertThisInitialized","Grid_Grid","src_components_FooterColorPalette","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e0fbd3b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FooterColorPalette.css\";\n\nconst colors = [\n  'rgb(255, 255, 255)',\n  'rgb(228, 228, 228)',\n  'rgb(136, 136, 136)',\n  'rgb(34, 34, 34)',\n  'rgb(255, 167, 209)',\n  'rgb(229, 0, 0)',\n  'rgb(229, 149, 0)',\n  'rgb(160, 106, 66)',\n  'rgb(229, 217, 0)',\n  'rgb(148, 224, 68)',\n  'rgb(2, 190, 1)',\n  'rgb(0, 211, 221)',\n  'rgb(0, 131, 199)',\n  'rgb(0, 0, 234)',\n  'rgb(207, 110, 228)',\n  'rgb(130, 0, 128)',\n];\n\nconst FooterColorPalette = function(props) {\n  return (\n    <div id=\"footer-bar\">\n      <div id=\"color-palette\">\n      {colors.map((color)=>(\n        <ColorOption\n          color={color}\n          isSelected={color === props.selectedColor}\n          onColorSelected={() => props.onColorSelected(color)}\n        />)\n      )}\n      </div>\n    </div>\n  )\n}\n\n/**\n * props: color, isSelected, onColorSelected\n */\nconst ColorOption = function(props) {\n  let classNames=\"color-option\"\n  if (props.isSelected) {\n    classNames+=\" selected-color-option\";\n  }\n  return (\n    <div\n      className={classNames}\n      style={{backgroundColor: props.color}}\n      onClick={props.onColorSelected}\n      >\n    </div>\n  );\n}\n\nexport default FooterColorPalette;\n","import React from \"react\";\nimport { STORAGE_URL } from \"../Constants\";\nimport \"./GridItem.css\";\n\nclass GridItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: props.color,\n    };\n  }\n\n  // This is needed to properly render updates from socket.io\n  componentDidUpdate(prevProps) {\n    if (prevProps.color !== this.props.color) {\n      this.setState({color: this.props.color});\n    }\n  }\n\n  handleClick = () => {\n    const { rowIndex, columnIndex } = this.props;\n    const color = this.props.selectedColor;\n    this.props.io.emit('user changed color', {\n      rowIndex, columnIndex, color,\n    });\n    this.setState({ color });\n  };\n\n  render() {\n    return (\n      <div className=\"GridItem\"\n        onClick={this.handleClick}\n        style={{ backgroundColor: this.state.color }}\n      >\n      </div>\n    );\n  }\n}\n\nexport default GridItem;\n","import React, { Component } from \"react\";\nimport GridItem from \"./GridItem\";\nimport { STORAGE_URL } from \"../Constants\";\nimport io from 'socket.io-client';\nimport \"./Grid.css\";\n\nexport default class Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drawing: null,\n    };\n    this.socketIo = io();\n    this.socketIo.connect('')\n    this.socketIo.on('initialize', (data) => {\n      this.setState({ drawing: data });\n    });\n    this.socketIo.on('new color', (data) => {\n      const currentDrawing = this.state.drawing;\n      if (currentDrawing) {\n        currentDrawing[data.rowIndex][data.columnIndex] = data.color;\n        this.setState({ drawing: currentDrawing });\n      }\n    });\n  }\n\n  render() {\n    if (!this.state.drawing) {\n      return <div>\"Loading...\"</div>;\n    }\n    // Given a 2d array, render it\n    const gridItems = [];\n    for (let rowIndex = 0; rowIndex < this.state.drawing.length; rowIndex++) {\n      gridItems[rowIndex] = [];\n      for (let columnIndex = 0; columnIndex < this.state.drawing[rowIndex].length; columnIndex++) {\n        gridItems[rowIndex].push(\n          <GridItem\n            io={this.socketIo}\n            color={this.state.drawing[rowIndex][columnIndex]}\n            rowIndex={rowIndex}\n            columnIndex={columnIndex}\n            selectedColor={this.props.selectedColor}\n          />,\n        );\n      }\n    }\n\n    return (\n      <div>\n        {gridItems.map(rowItem => {\n          return <div className=\"GridRow\">{rowItem}</div>;\n        })}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport FooterColorPalette from \"./components/FooterColorPalette\";\nimport Grid from \"./components/Grid\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.onColorSelected = this.onColorSelected.bind(this);\n    this.state = {\n      selectedColor: null,\n    }\n  }\n\n  onColorSelected(color) {\n    this.setState({\n      selectedColor: color,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>Reddit Place Clone</div>\n        <div className=\"Subtext\">Click on a tile to change its color</div>\n        <Grid selectedColor={this.state.selectedColor} />\n        <FooterColorPalette\n          onColorSelected={this.onColorSelected}\n          selectedColor={this.state.selectedColor}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}